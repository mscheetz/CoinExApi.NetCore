<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoinExApiAccess</name>
    </assembly>
    <members>
        <member name="M:CoinExApiAccess.CoinExApiClient.#ctor">
            <summary>
            Constructor - no authentication
            </summary>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.#ctor(System.String,System.String)">
            <summary>
            Constructor - with authentication
            </summary>
            <param name="apiKey">Api key</param>
            <param name="apiSecret">Api secret</param>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.#ctor(System.String)">
            <summary>
            Constructor - with authentication
            </summary>
            <param name="configPath">Path to config file</param>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetMarketList">
            <summary>
            Get Trading Pairs
            </summary>
            <returns>Array of string of trading pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetTicker(System.String)">
            <summary>
            Get Ticker for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <returns>TickerData object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetMarketDepth(System.String,CoinExApiAccess.Entities.Merge,CoinExApiAccess.Entities.Limit)">
            <summary>
            Get Market depth for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="merge">Decimal places</param>
            <param name="limit">Return amount</param>
            <returns>MarketDepth object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetTransactionData(System.String,System.Int32)">
            <summary>
            Get Transaction data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="id">Transaction history id</param>
            <returns>Transaction object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetKLine(System.String,CoinExApiAccess.Entities.Interval,System.Int32)">
            <summary>
            Get K-Line data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="interval">Time interval for KLines</param>
            <param name="limit">Number of KLines to return, (default = 100, max = 1000)</param>
            <returns>Array of KLine objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetBalance">
            <summary>
            Get account balance
            </summary>
            <returns>Dictionary of Coin / value pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetBalance(System.String)">
            <summary>
            Get account balance
            </summary>
            <param name="coin">Coin to get balance of</param>
            <returns>Asset values for specified coin</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetWithdrawals">
            <summary>
            Get all Withdrawals from account
            </summary>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetWithdrawals(System.Int32)">
            <summary>
            Get Withdrawals from account by page number
            </summary>
            <param name="page">Page number to return (default = 1)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetWithdrawals(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Withdrawals from account
            </summary>
            <param name="coin">Coin to return (default = "")</param>
            <param name="withdrawlId">Id of withdrawal to start listing (optional)</param>
            <param name="page">Page number to return (default = 1)</param>
            <param name="limit">Number of records to return (default = 10)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.SubmitWithdrawal(System.String,System.String,System.Decimal)">
            <summary>
            Submit a withdrawal
            </summary>
            <param name="coin">Coin to send</param>
            <param name="address">Address to send to</param>
            <param name="amount">Amount to send</param>
            <returns>Withdrawal object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.CancelWithdrawal(System.Int64)">
            <summary>
            Cancel a withdrawal
            </summary>
            <param name="id">Withdrawal request Id</param>
            <returns>Boolean when complete</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.LimitOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post Limit Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.MarketOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal)">
            <summary>
            Post Market Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.IOCOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post IOC (Immediate-or-Cancel) Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetOpenOrders(System.String,System.Int32,System.Int32)">
            <summary>
            Get Open Orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with OpenOrder array</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetOrder(System.String,System.Int32)">
            <summary>
            Get an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetOrders(System.String,System.Int32,System.Int32)">
            <summary>
            Get completed orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Order array</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetUserDeals(System.String,System.Int32,System.Int32)">
            <summary>
            Get user deals
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Deal array</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.CancelOrder(System.String,System.Int32)">
            <summary>
            Cancel an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetMiningDifficulty">
            <summary>
            Get mining difficulty
            </summary>
            <returns>Current MiningDifficulty</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetMarketListAsync">
            <summary>
            Get Trading Pairs
            </summary>
            <returns>Array of string of trading pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetTickerAsync(System.String)">
            <summary>
            Get Ticker for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <returns>TickerData object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetMarketDepthAsync(System.String,CoinExApiAccess.Entities.Merge,CoinExApiAccess.Entities.Limit)">
            <summary>
            Get Market depth for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="merge">Decimal places</param>
            <param name="limit">Return amount</param>
            <returns>MarketDepth object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetTransactionDataAsync(System.String,System.Int32)">
            <summary>
            Get Transaction data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="id">Transaction history id</param>
            <returns>Transaction object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetKLineAsync(System.String,CoinExApiAccess.Entities.Interval,System.Int32)">
            <summary>
            Get K-Line data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="interval">Time interval for KLines</param>
            <param name="limit">Number of KLines to return, (default = 100, max = 1000)</param>
            <returns>Array of KLine objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetBalanceAsync">
            <summary>
            Get account balance
            </summary>
            <returns>Dictionary of Coin / value pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetBalanceAsync(System.String)">
            <summary>
            Get account balance
            </summary>
            <param name="coin">Coin to get balance of</param>
            <returns>Asset values for specified coin</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetWithdrawalsAsync">
            <summary>
            Get all Withdrawals from account
            </summary>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetWithdrawalsAsync(System.Int32)">
            <summary>
            Get Withdrawals from account by page number
            </summary>
            <param name="page">Page number to return (default = 1)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetWithdrawalsAsync(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Withdrawals from account
            </summary>
            <param name="coin">Coin to return (default = "")</param>
            <param name="withdrawlId">Id of withdrawal to start listing (optional)</param>
            <param name="page">Page number to return (default = 1)</param>
            <param name="limit">Number of records to return (default = 10)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.SubmitWithdrawalAsync(System.String,System.String,System.Decimal)">
            <summary>
            Submit a withdrawal
            </summary>
            <param name="coin">Coin to send</param>
            <param name="address">Address to send to</param>
            <param name="amount">Amount to send</param>
            <returns>Withdrawal object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.CancelWithdrawalAsync(System.Int64)">
            <summary>
            Cancel a withdrawal
            </summary>
            <param name="id">Withdrawal request Id</param>
            <returns>Boolean when complete</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.LimitOrderAsync(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post Limit Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.MarketOrderAsync(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal)">
            <summary>
            Post Market Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.IOCOrderAsync(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post IOC (Immediate-or-Cancel) Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetOpenOrdersAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get Open Orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with OpenOrder array</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetOrderAsync(System.String,System.Int32)">
            <summary>
            Get an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetOrdersAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get completed orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Order array</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetUserDealsAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Get user deals
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Deal array</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.CancelOrderAsync(System.String,System.Int32)">
            <summary>
            Cancel an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.CoinExApiClient.GetMiningDifficultyAsync">
            <summary>
            Get mining difficulty
            </summary>
            <returns>Current MiningDifficulty</returns>
        </member>
        <member name="M:CoinExApiAccess.Core.Helper.DecimalValueAtPrecision(System.Int32,System.Int32)">
            <summary>
            Create new decmial to the Nth power
            </summary>
            <param name="precision">precision of decimal</param>
            <param name="value">Value to set, default = 1</param>
            <returns>New decimal</returns>
        </member>
        <member name="M:CoinExApiAccess.Core.Helper.ObjectToString``1(``0)">
            <summary>
            Convert an object to a string of property names and values
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="myObject">Object to convert</param>
            <returns>String of properties and values</returns>
        </member>
        <member name="M:CoinExApiAccess.Core.Helper.DictionaryToString(System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
            Convert a Dictionary to a string of property names and values
            </summary>
            <param name="myDictionary">Object to convert</param>
            <returns>String of properties and values</returns>
        </member>
        <member name="M:CoinExApiAccess.Core.Helper.IntervalToString(CoinExApiAccess.Entities.Interval)">
            <summary>
            Get string value of interval for api calls
            </summary>
            <param name="interval">Interval value</param>
            <returns>String of interval</returns>
        </member>
        <member name="M:CoinExApiAccess.Core.Security.GetHMACSignature(System.String)">
            <summary>
            Get HMAC Signature
            </summary>
            <param name="message">Message to sign</param>
            <returns>string of signed message</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetMarketList">
            <summary>
            Get Trading Pairs
            </summary>
            <returns>Array of string of trading pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetTicker(System.String)">
            <summary>
            Get Ticker for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <returns>TickerData object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetMarketDepth(System.String,CoinExApiAccess.Entities.Merge,CoinExApiAccess.Entities.Limit)">
            <summary>
            Get Market depth for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="merge">Decimal places</param>
            <param name="limit">Return amount</param>
            <returns>MarketDepth object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetTransactionData(System.String,System.Int32)">
            <summary>
            Get Transaction data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="id">Transaction history id</param>
            <returns>Transaction object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetKLine(System.String,CoinExApiAccess.Entities.Interval,System.Int32)">
            <summary>
            Get K-Line data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="interval">Time interval for KLines</param>
            <param name="limit">Number of KLines to return, (default = 100, max = 1000)</param>
            <returns>Array of KLine objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetBalance">
            <summary>
            Get account balance
            </summary>
            <returns>Dictionary of Coin / value pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetWithdrawals">
            <summary>
            Get all Withdrawals from account
            </summary>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetWithdrawals(System.Int32)">
            <summary>
            Get Withdrawals from account by page number
            </summary>
            <param name="page">Page number to return (default = 1)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetWithdrawals(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Withdrawals from account
            </summary>
            <param name="coin">Coin to return (default = "")</param>
            <param name="withdrawlId">Id of withdrawal to start listing (optional)</param>
            <param name="page">Page number to return (default = 1)</param>
            <param name="limit">Number of records to return (default = 100, max = 100)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.SubmitWithdrawal(System.String,System.String,System.Decimal)">
            <summary>
            Submit a withdrawal
            </summary>
            <param name="coin">Coin to send</param>
            <param name="address">Address to send to</param>
            <param name="amount">Amount to send</param>
            <returns>Withdrawal object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.CancelWithdrawal(System.Int64)">
            <summary>
            Cancel a withdrawal
            </summary>
            <param name="id">Withdrawal request Id</param>
            <returns>Boolean when complete</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.LimitOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post Limit Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.MarketOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal)">
            <summary>
            Post Market Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.IOCOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post IOC (Immediate-or-Cancel) Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetOpenOrders(System.String,System.Int32,System.Int32)">
            <summary>
            Get Open Orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with OpenOrder array</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetOrder(System.String,System.Int32)">
            <summary>
            Get an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetOrders(System.String,System.Int32,System.Int32)">
            <summary>
            Get completed orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Order array</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetUserDeals(System.String,System.Int32,System.Int32)">
            <summary>
            Get user deals
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Deal array</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.CancelOrder(System.String,System.Int32)">
            <summary>
            Cancel an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.Interface.ICoinExRepository.GetMiningDifficulty">
            <summary>
            Get mining difficulty
            </summary>
            <returns>Current MiningDifficulty</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.#ctor">
            <summary>
            Constructor for non-signed endpoints
            </summary>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.#ctor(System.String,System.String)">
            <summary>
            Constructor for signed endpoints
            </summary>
            <param name="apiKey">Api key</param>
            <param name="apiSecret">Api secret</param>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.#ctor(System.String)">
            <summary>
            Constructor for signed endpoints
            </summary>
            <param name="configPath">String of path to configuration file</param>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.LoadRepository(System.String,System.String)">
            <summary>
            Load repository
            </summary>
            <param name="key">Api key value (default = "")</param>
            <param name="secret">Api secret value (default = "")</param>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.ValidateExchangeConfigured">
            <summary>
            Check if the Exchange Repository is ready for trading
            </summary>
            <returns>Boolean of validation</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetMarketList">
            <summary>
            Get Trading Pairs
            </summary>
            <returns>Array of string of trading pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetTicker(System.String)">
            <summary>
            Get Ticker for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <returns>TickerData object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetMarketDepth(System.String,CoinExApiAccess.Entities.Merge,CoinExApiAccess.Entities.Limit)">
            <summary>
            Get Market depth for a trading pair
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="merge">Decimal places</param>
            <param name="limit">Return amount</param>
            <returns>MarketDepth object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetTransactionData(System.String,System.Int32)">
            <summary>
            Get Transaction data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="id">Transaction history id</param>
            <returns>Transaction object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetKLine(System.String,CoinExApiAccess.Entities.Interval,System.Int32)">
            <summary>
            Get K-Line data
            </summary>
            <param name="pair">String of trading pair</param>
            <param name="interval">Time interval for KLines</param>
            <param name="limit">Number of KLines to return, (default = 100, max = 1000)</param>
            <returns>Array of KLine objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetBalance">
            <summary>
            Get account balance
            </summary>
            <returns>Dictionary of Coin / value pairs</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetWithdrawals">
            <summary>
            Get all Withdrawals from account
            </summary>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetWithdrawals(System.Int32)">
            <summary>
            Get Withdrawals from account by page number
            </summary>
            <param name="page">Page number to return (default = 1)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetWithdrawals(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Withdrawals from account
            </summary>
            <param name="coin">Coin to return (default = "")</param>
            <param name="withdrawlId">Id of withdrawal to start listing (optional)</param>
            <param name="page">Page number to return (default = 1)</param>
            <param name="limit">Number of records to return (default = 100)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.OnGetWithdrawals(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Withdrawals from account
            </summary>
            <param name="coin">Coin to return (default = "")</param>
            <param name="withdrawlId">Id of withdrawal to start listing (optional)</param>
            <param name="limit">Number of records to return (default = 100)</param>
            <returns>Array of Withdrawal objects</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.SubmitWithdrawal(System.String,System.String,System.Decimal)">
            <summary>
            Submit a withdrawal
            </summary>
            <param name="coin">Coin to send</param>
            <param name="address">Address to send to</param>
            <param name="amount">Amount to send</param>
            <returns>Withdrawal object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.CancelWithdrawal(System.Int64)">
            <summary>
            Cancel a withdrawal
            </summary>
            <param name="id">Withdrawal request Id</param>
            <returns>Boolean when complete</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.LimitOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post Limit Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.MarketOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal)">
            <summary>
            Post Market Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.IOCOrder(System.String,CoinExApiAccess.Entities.OrderType,System.Decimal,System.Decimal)">
            <summary>
            Post IOC (Immediate-or-Cancel) Order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="type">Trade type</param>
            <param name="amount">Trade amount</param>
            <param name="price">Trade price</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetOpenOrders(System.String,System.Int32,System.Int32)">
            <summary>
            Get Open Orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with OpenOrder array</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetOrder(System.String,System.Int32)">
            <summary>
            Get an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetOrders(System.String,System.Int32,System.Int32)">
            <summary>
            Get completed orders
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Order array</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetUserDeals(System.String,System.Int32,System.Int32)">
            <summary>
            Get user deals
            </summary>
            <param name="pair">Trading pair</param>
            <param name="page">Page number (default = 1)</param>
            <param name="limit">Number of order to return (default = 100, max = 100)</param>
            <returns>PagedResponse with Deal array</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.CancelOrder(System.String,System.Int32)">
            <summary>
            Cancel an order
            </summary>
            <param name="pair">Trading pair</param>
            <param name="id">Order Number</param>
            <returns>Order object</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetMiningDifficulty">
            <summary>
            Get mining difficulty
            </summary>
            <returns>Current MiningDifficulty</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.ResponseHandler``1(CoinExApiAccess.Entities.ResponseMessage{``0})">
            <summary>
            Handle null responses or error codes from responses
            </summary>
            <typeparam name="T">Object type to return</typeparam>
            <param name="response">ResponseMessage to process</param>
            <returns>data from response or exception thrown</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetRequestHeaders(System.String)">
            <summary>
            Get Request Headers
            </summary>
            <returns>Dictionary of header values</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetSignature(System.String)">
            <summary>
            Get signature of message
            </summary>
            <param name="queryString">string of querystring values</param>
            <returns>String of message signature</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetSignature(System.Collections.Generic.List{System.String})">
            <summary>
            Get signature of message
            </summary>
            <param name="queryString">String[] of querystring values</param>
            <returns>String of message signature</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.GetSignature(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Get signature of message
            </summary>
            <param name="parameters">Dictionary of request parameters</param>
            <returns>String of message signature</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.CreateUrl(System.String)">
            <summary>
            Create a CoinEx url
            </summary>
            <param name="apiPath">String of path to endpoint</param>
            <returns>String of url</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.CreateUrl(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a CoinEx url
            </summary>
            <param name="apiPath">String of path to endpoint</param>
            <param name="parameters">String[] of querystring values</param>
            <returns>String of url</returns>
        </member>
        <member name="M:CoinExApiAccess.Data.CoinExRepository.CreateUrl(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Create a CoinEx url
            </summary>
            <param name="apiPath">String of path to endpoint</param>
            <param name="parameters">String[] of querystring values</param>
            <returns>String of url</returns>
        </member>
    </members>
</doc>
